@model TestingSystem.Models.QuestionCategory
@{
    ViewBag.Title = "AddCategory";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<h2>AddCategory</h2>
<h4>Exam Paper</h4>
@using (Html.BeginForm("AddCategory", "QuestionCategory", FormMethod.Post, new { id = "ExamPaperForm", area = "Admin" }))//"popupForm"
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @*@Html.HiddenFor(model => model.CategoryID)*@

        <div class="form-group">
            <div class="col-md-4">
                <label>Title</label>
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control ", @required = "required" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-4">
                <label>CreatedBy</label>
                @Html.DropDownList("CreatedBy", null, htmlAttributes: new { @class = "form-control" })
                @*@Html.EditorFor(model => model.CreatedBy, new { htmlAttributes = new { @class = "form-control btn", @required = "required" } })*@
                @Html.ValidationMessageFor(model => model.CreatedBy, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                <label>ModifiedBy</label>
                @Html.DropDownList("ModifiedBy", null, htmlAttributes: new { @class = "form-control" })
                @*@Html.EditorFor(model => model.ModifiedBy, new { htmlAttributes = new { @class = "form-control ", @required = "required" } })*@
                @Html.ValidationMessageFor(model => model.ModifiedBy, "", new { @class = "text-danger" })
            </div>
        </div>
       
        <div class="form-group">
            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox " >
                    @Html.EditorFor(model => model.IsActive)
                    @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <input type="submit" value="Save" class="btn btn-primary" />
        <input type="submit" value="Create and refresh" class="btn btn-primary" />
        @Html.ActionLink("Back", "Index", "QuestionCategory", new { area = "Admin", @class = "btn btn btn-light" })
    </div>
}

@section scripts
{
    @*<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.0/jquery.validate.min.js"></script>*@
    <script>
        $(document).ready(function () {
            $("#ExamPaperForm").validate({
                rules: {
                    Title: "required",
                    NumberOfQuestion: {
                        required: true,
                        number: true
                    },
                    Time: {
                        required: true,
                        number: true
                    }
                },
                messages: {
                    Title: "Title is required",
                    NumberOfQuestion:
                    {
                        required: "Number of question is required",
                        number: "Number of question must be a number"
                    },
                    Time:
                    {
                        required: "Title is required",
                        number: "Title must be a number"
                    },
                },
                errorElement: "em",
                errorPlacement: function (error, element) {
                    // Add the `help-block` class to the error element
                    error.addClass("help-block");

                    if (element.prop("type") === "checkbox") {
                        error.insertAfter(element.parent("label"));
                    } else {
                        error.insertAfter(element);
                    }
                },
                highlight: function (element, errorClass, validClass) {
                    $(element).parents(".col-md-4").addClass("has-error").removeClass("has-success");

                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).parents(".col-md-4").addClass("has-success").removeClass("has-error");

                }
            });

            $("#isActive").change(function () {
                if ($(this).prop("checked") === true) {
                    $("#isActive").val("true");
                }
                else if ($(this).prop("checked") === false) {
                    $("#isActive").val("false");
                }
            });
        });
    </script>


    @if (TempData["Success"] != null)
    {
        <script type="text/javascript">
            $.notify(@Html.Raw(Json.Encode(TempData["Success"])), "success");
        </script>
    }

    @Html.Partial("_MessageBoxError")
    @if (!string.IsNullOrEmpty((string)TempData["Failure"]))
    {
        <script type="text/javascript">
            // !!!??? chỗ html.raw, ko hiểu sao ko nhận ViewData
            $("#error-msgbox-modal #error-msg").text(@Html.Raw(Json.Encode(TempData["Failure"])));
            $("#error-msgbox-modal #error-msg1").text('');
            $('#error-msgbox-modal').modal('show');
        </script>
    }
}


