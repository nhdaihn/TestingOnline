@model TestingSystem.Models.ExamPaper
@{

    ViewBag.Title = "Exam paper";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
    var isUpdate = ViewBag.IsUpdate;
    var status = ViewBag.Status;
}

<h4>Exam Paper</h4>
@using (Html.BeginForm("ExamPaper", "ExamPaper", FormMethod.Post, new { id = "ExamPaperForm", area = "Admin" }))//"popupForm"
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ExamPaperID)

    <div class="form-group">
        <div class="col-md-4">
            <label>Title</label>
            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
        </div>
        <div class="col-md-4">
            <label>Number Of Question</label>
            @Html.EditorFor(model => model.NumberOfQuestion, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
            @Html.ValidationMessageFor(model => model.NumberOfQuestion, "", new { @class = "text-danger" })
        </div>
        <div class="col-md-4">
            <label>Time</label>
            @Html.EditorFor(model => model.Time, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
            @Html.ValidationMessageFor(model => model.Time, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-4">
            <label>Status</label>
            <select class="form-control">
                @if (status == true)
                {
                    <option name="Status" selected value="true">Public</option>
                    <option name="Status" value="false">Draff</option>
                }
                else
                {
                    <option name="Status" value="true">Public</option>
                    <option name="Status" selected value="false">Draff</option>
                }
            </select>
            @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-4">
            <div class="form-check">
                <!-- ko hiểu sao nếu Model.IsActive = true thì value lại = "value" -->
                @{var isActive = (Model.IsActive ? "true" : "false");}
                <input class="form-check-input" name="IsActive" type="checkbox" id="isActive" value="@isActive" checked="@Model.IsActive">
                <label class="form-check-label" for="isActive">
                    Is Active
                </label>
            </div>
            @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
        </div>
    </div>
    <input type="submit" value="Save" class="btn btn-primary" />
    <input type="submit" value="Create and refresh" class="btn btn-primary" />
    @Html.ActionLink("Back", "ExamPapers", "ExamPaper", new { area = "Admin", @class = "btn btn btn-light" })
</div>
}

@section scripts
{
    @*<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.0/jquery.validate.min.js"></script>*@
    <script>
        $(document).ready(function () {
            $("#ExamPaperForm").validate({
                rules: {
                    Title: "required",
                    NumberOfQuestion: {
                        required: true,
                        number: true
                    },
                    Time: {
                        required: true,
                        number: true
                    }
                },
                messages: {
                    Title: "Title is required",
                    NumberOfQuestion:
                    {
                        required: "Number of question is required",
                        number:"Number of question must be a number"
                    },
                    Time:
                    {
                        required: "Title is required",
                        number: "Title must be a number"
                    },
                },
                errorElement: "em",
                errorPlacement: function (error, element) {
                    // Add the `help-block` class to the error element
                    error.addClass("help-block");

                    if (element.prop("type") === "checkbox") {
                        error.insertAfter(element.parent("label"));
                    } else {
                        error.insertAfter(element);
                    }
                },
                highlight: function (element, errorClass, validClass) {
                    $(element).parents(".col-md-4").addClass("has-error").removeClass("has-success");

                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).parents(".col-md-4").addClass("has-success").removeClass("has-error");

                }
            });

            $("#isActive").change(function () {
                if ($(this).prop("checked") === true) {
                    $("#isActive").val("true");
                }
                else if ($(this).prop("checked") === false) {
                    $("#isActive").val("false");
                }
            });
        });
    </script>


    @if (TempData["Success"] != null)
    {
        <script type="text/javascript">
            $.notify(@Html.Raw(Json.Encode(TempData["Success"])), "success");
        </script>
    }

    @Html.Partial("_MessageBoxError")
    @if (!string.IsNullOrEmpty((string)TempData["Failure"]))
    {
        <script type="text/javascript">
            // !!!??? chỗ html.raw, ko hiểu sao ko nhận ViewData
            $("#error-msgbox-modal #error-msg").text(@Html.Raw(Json.Encode(TempData["Failure"])));
            $("#error-msgbox-modal #error-msg1").text('');
            $('#error-msgbox-modal').modal('show');
        </script>
    }
}
