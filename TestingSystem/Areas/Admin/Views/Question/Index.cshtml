@model IEnumerable<TestingSystem.Models.Question>

@{
    /**/

    ViewBag.Title = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}
<link href="~/Content/bootstrap.min.css" rel="stylesheet" />
<form class="form-inline searchform card" action="/Admin/Question/Index/">
    <div class="form-group">
        <label for="sel1">Level</label>
        <select class="form-control" id="Level" name="Level">
            <option value="" selected disabled hidden>Choice one</option>
            @foreach (var item in ViewBag.listLevel)
            {
                <option value="@item.LevelId">@item.Name</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="sel1">Category</label>
        <select class="form-control" id="CategoryID" name="CategoryID">
            <option value="" selected disabled hidden>Choice one</option>
            @foreach (var item in ViewBag.listCategory)
            {
                <option value="@item.CategoryID">@item.Name</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="CreateBy">Created By</label>
        <input type="text" class="form-control" id="CreateBy" name="CreatedBy">
    </div>
    <div class="form-group">
        <label for="CreatedDate">Created Date</label>
        <input type="date" class="form-control" id="CreatedDate" name="CreatedDate">
    </div>
    <div class="form-group">
        <label for="Content">Content</label>
        <input type="text" class="form-control" id="Content" name="Content">
    </div>
    <button type="submit" class="btn btn-default">Filter</button>
</form>
<form action="/Admin/Question/Search/">
    <input type="text" placeholder="Search.." name="input">
    <button type="submit">Submit</button>
</form>
<div class="card">
    <div class="card-header bg-light">Question</div>
    <div class="card-body">
        <div>
            <a class="btn btn-success" href="/Admin/Question/Create"><i class="fa fa-plus"></i> Create New</a>
        </div>
        <table class="table table-bordered">
            <tr class="nhdai-table-title">
                <th><input type="checkbox" name="checkAll" id="checkAll" onclick="toggle(this);" style="text-align:center; vertical-align: middle;" /> </th>
                <th>
                    Content
                </th>
                <th>
                    Image
                </th>
                <th>
                    Category
                </th>
                <th>
                    IsActive
                </th>
                <th>
                    Created By
                </th>
                <th>
                    Created Date
                </th>
                <th></th>
            </tr>

            @foreach (var item in Model)
            {
                <tr>
                    <td style="text-align:center; vertical-align: middle;"><input type="checkbox" class="checkCheckbox" data-id="@item.QuestionID" name="cb_@item.QuestionID" id="cb_@item.QuestionID" /></td>
                    <td class="contentQuestion">
                        <a href="/Admin/Question/Detail/@item.QuestionID">@item.Content</a>
                    </td>
                    <td>
                        <img src="/Content/QuestionUpload/Images/@item.Image" class="img-fluid" width="50" style="text-align: center" />
                    </td>
                    @foreach (var cate in ViewBag.listCategory)
                    {
                        if (item.CategoryID == cate.CategoryID)
                        {
                            <td>
                                @cate.Name
                            </td>
                        }
                    }
                    <td>

                        @Html.DisplayFor(Model => item.IsActive)@*<input  type="checkbox"  value="@item.IsActive" />*@
                    </td>
                    <td>
                        @item.CreatedBy
                    </td>
                    <td>
                        @Convert.ToDateTime(item.CreatedDate).ToString("dd/MM/yyyy")
                    </td>
                    <td>
                        <a class="btn btn-warning btn-sm" href="/Admin/Question/Edit/@item.QuestionID"><i class="fa fa-pencil"></i> Edit</a>
                        <a class="btn btn-danger btn-sm" href="/Admin/Question/Delete/@item.QuestionID"><i class="fa fa-trash"></i> Delete</a>
                    </td>
                </tr>
            }
        </table>
        <a class="btn" id="btnRemove" name="btnRemove" style="background:burlywood; color: yellow;padding: 4px">Remove</a>
    </div>
</div>
@*  *@
<div class="tablecontainer">
    @*<a class="popup btn btn-primary" href="/Employee/Employee/0">Add new</a>*@
    <div class="button-area">
        <a class="group-btn" id="btn-add" href="/Admin/ExamPaper/ExamPaper/0"><span class="glyphicon glyphicon-plus"></span>   Add new</a>
        <a class="group-btn" id="btn-export" href="/Admin/ExamPaper/ExamPaper/0"><span class="glyphicon glyphicon-save"></span>   Export file</a>
        <a class="group-btn" id="btn-import" href="/Admin/ExamPaper/ExamPaper/0"><span class="glyphicon glyphicon-open"></span>   Import file</a>
        <a class="btn-delete-all" id="delete-all" href="javascript:void(0)"><span class="glyphicon glyphicon-trash"></span>   Delete all</a>
    </div>

    <table id="examPaperTable" class="display" cellspacing="0" width="100%">
        <thead>
            <tr>
                <th><input type="checkbox" name="select_all" value="1" id="examPaper-select-all"></th>
                <th>Content</th>
                <th>Image</th>
                <th>Category</th>
                <th>IsActive</th>
                <th>Created By</th>
                <th>Created Date</th>
                <th>Action</th>
            </tr>
        </thead>
    </table>
</div>

@section scripts
{
    @if (TempData["Success"] != null)
    {
        <script type="text/javascript">
            $.notify(@Html.Raw(Json.Encode(TempData["Success"])), "success");
        </script>
    }

    @Html.Partial("_MessageBoxError");
    @if (!string.IsNullOrEmpty((string)TempData["Failure"]))
    {
        <script type="text/javascript">
            // !!!??? chỗ html.raw, ko hiểu sao ko nhận ViewData
            $("#error-msgbox-modal #error-msg").text(@Html.Raw(Json.Encode(TempData["Failure"])));
            $("#error-msgbox-modal #error-msg1").text('');
            $('#error-msgbox-modal').modal('show');
        </script>
    }

    @Html.Partial("_MessageBoxDelete");
    <script type="text/javascript">
        $(document).ready(function () {
            debugger;
            var examPaperTable = $('#examPaperTable').DataTable({
                //orderCellsTop: true,
                //fixedHeader: true,

                "ajax": {
                    "url": /*"/Admin/Question/Index"*/,
                    "type": "GET",
                    "datatype": "json"
                },
                "columns": [
                    { "data": "QuestionID", "autoWidth": true },
                    { "data": "Content", "autoWidth": true },
                    { "data": "Image", "autoWidth": true },
                    { "data": "Category", "autoWidth": true },
                    { "data": "IsActive", "autoWidth": true },
                    { "data": "CreatedBy", "autoWidth": true },
                    {
                        "data": "CreatedDate", "autoWidth": true, "render": function (data) {
                            return moment(data).format('DD/MM/YYYY');
                        }
                    },
                    {
                        "data": "QuestionID", "width": "15px", "render": function (data) {
                            return '<a class="update-row" href="/Admin/Question/Delete/' + data + '"><span class="glyphicon glyphicon-pencil"></span></a>   <a class="delete-row" data-val-id="' + data + '" href="javascript:void(0)"><span class="glyphicon glyphicon-trash"></span></a>';
                        },
                    }
                ],
                'columnDefs': [{
                    'targets': 0,
                    'searchable': false,
                    'orderable': false,
                    'className': 'dt-body-center',
                    'render': function (data, type, full, meta) {
                        return '<input type="checkbox" name="id[]" value="' + $('<div/>').text(data).html() + '">';
                    }
                }],
                'order': [[1, 'asc']]

            });

            // Handle click on "Select all" control
            $('#examPaper-select-all').on('click', function () {
                // Get all rows with search applied
                var rows = examPaperTable.rows({ 'search': 'applied' }).nodes();
                // Check/uncheck checkboxes for all rows in the table
                $('input[type="checkbox"]', rows).prop('checked', this.checked);
            });

            // Handle click on checkbox to set state of "Select all" control
            $('#examPaperTable tbody').on('change', 'input[type="checkbox"]', function () {
                // If checkbox is not checked
                if (!this.checked) {
                    var el = $('#examPaper-select-all').get(0);
                    // If "Select all" control is checked and has 'indeterminate' property
                    if (el && el.checked && ('indeterminate' in el)) {
                        // Set visual state of "Select all" control
                        // as 'indeterminate'
                        el.indeterminate = true;
                    }
                }
            });

            $("#delete-all").on("click",
                function (e) {
                    var data = examPaperTable.$('input[type="checkbox"]:checked');

                    if (data.length === 0) {
                        $("#error-msgbox-modal #error-msg").text('Please choose record to delete!');
                        $("#error-msgbox-modal #error-msg1").text('');
                        $('#error-msgbox-modal').modal('show');
                    } else {
                        var ids = [];
                        $.each(data, function (index, elem) {
                            var rowId = $(elem).val();
                            if (ids.indexOf(rowId) < 0) {
                                ids.push(rowId);
                            }
                        });
                        $('#delete-msgbox-modal').modal('show').off('click', '#btn-delete').on('click', '#btn-delete', function (e) {
                            $.ajax({
                                url: "/Admin/ExamPaper/Delete/",
                                data: {
                                    ids: ids
                                },
                                type: "Get",
                                datatype: "json",
                                traditional: true,
                                error: function (data) {
                                    $("#error-msgbox-modal #error-msg").text('Something went wrong, please try again!');
                                    $("#error-msgbox-modal #error-msg1").text('');
                                    $('#error-msgbox-modal').modal('show');
                                },
                                success: function (status) {
                                    if (status) {
                                        debugger;
                                        $.notify("Delete exam paper successfully!", "success");
                                        examPaperTable.ajax.reload();
                                        //location.reload();
                                    }
                                }

                            });
                            e.stopPropagation();
                        });
                    }

                });

            setTimeout(function () {

                $(".delete-row").on("click",
                    function (e) {
                        var ids = [];
                        var id = $(this).data("val-id");
                        if (ids.indexOf(id) < 0) {
                            ids.push(id);
                        }
                        debugger;
                        $('#delete-msgbox-modal').modal('show').off('click', '#btn-delete').on('click', '#btn-delete', function (e) {
                            $.ajax({
                                url: "/Admin/ExamPaper/Delete/",
                                data: {
                                    ids: ids
                                },
                                traditional: true,
                                type: "Get",
                                datatype: "json",
                                error: function (status) {
                                    $("#error-msgbox-modal #error-msg").text('Something went wrong, please try again!');
                                    $("#error-msgbox-modal #error-msg1").text('');
                                    $('#error-msgbox-modal').modal('show');
                                },
                                success: function (status) {
                                    if (status) {
                                        debugger;
                                        $.notify("Delete exam paper successfully!", "success");
                                        examPaperTable.ajax.reload();
                                        //location.reload();
                                    }
                                }

                            });
                            e.stopPropagation();
                        });
                    });

            }, 500);

            //$('.tablecontainer').on('click', 'a.popup', function (e) {

            //    e.preventDefault();
            //    OpenPopup($(this).attr('href'));
            //});

            //function OpenPopup(pageUrl) {
            //    debugger;
            //    var $pageContent = $('<div/>');
            //    $pageContent.load(pageUrl, function () {

            //        $('#popupForm', $pageContent).removeData('validator');
            //        $('#popupForm', $pageContent).removeData('unobtrusivevalidation');
            //        $.validator.unobtrusive.parse('form');

            //    });

            //    $dialog = $('<div class="popupWindow" style="overflow:auto"></div>')
            //        .html($pageContent)
            //        .dialog({
            //            draggable: false,
            //            autoOpen: false,
            //            resizable: false,
            //            model: true,
            //            title: 'Employee',
            //            height: 550,
            //            width: 600,
            //            close: function () {

            //                $dialog.dialog('destroy').remove();
            //            }
            //        })


            //    $('.popupWindow').on('submit', '#popupForm', function (e) {
            //        var url = $('#popupForm')[0].action;
            //        $.ajax({
            //            type: "POST",
            //            url: url,
            //            data: $('#popupForm').serialize(),
            //            success: function (data) {
            //                if (data.status) {
            //                    $dialog.dialog('close');
            //                    employTable.ajax.reload();
            //                }
            //            }
            //        });
            //    })

            //    $dialog.dialog('open');
            //};
        });
    </script>
    <script>
        $(document).ready(function () {

        });
    </script>
}

